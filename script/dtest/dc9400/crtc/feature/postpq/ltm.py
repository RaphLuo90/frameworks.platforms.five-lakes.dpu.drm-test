#############################################################################
#    Copyright 2012 - 2023 Vivante Corporation, Santa Clara, California.    #
#    All Rights Reserved.                                                   #
#                                                                           #
#    Permission is hereby granted, free of charge, to any person obtaining  #
#    a copy of this software and associated documentation files (the        #
#    'Software'), to deal in the Software without restriction, including    #
#    without limitation the rights to use, copy, modify, merge, publish,    #
#    distribute, sub license, and/or sell copies of the Software, and to    #
#    permit persons to whom the Software is furnished to do so, subject     #
#    to the following conditions:                                           #
#                                                                           #
#    The above copyright notice and this permission notice (including the   #
#    next paragraph) shall be included in all copies or substantial         #
#    portions of the Software.                                              #
#                                                                           #
#    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,        #
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.#
#    IN NO EVENT SHALL VIVANTE AND/OR ITS SUPPLIERS BE LIABLE FOR ANY       #
#    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   #
#    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      #
#    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 #
#                                                                           #
#############################################################################

from collections import OrderedDict
from dtest.helper import *

def __get_name(id, subname):
    return 'crtc%d.feature.postpq.ltm.'%id + subname

def __get_case_normal_1(crtc_id:int):
    def __get_property():
        p_ltm = OrderedDict()
        p_ltm["ltm_enable"] = 1
        p_ltm["Mode"] = 1
        p_ltm["VidMode"] = 1
        p_ltm["Strength"] = 4
        p_ltm["Grid_num"] = [12,12]
        p_ltm["width"] = 1920
        p_ltm["height"] = 1280

        return OrderedDict([('LTM', p_ltm)])

    def __get_golden():
        # Fill golden
        #return OrderedDict([('md5sum', '1234567')])
        return OrderedDict()

    crtc = Crtc(crtc_id, __get_property())

    plane = [Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_0.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_1.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_2.bmp")]

    conn = Connector(0, crtc, 'AR30', 1920, 1280, 60, golden=__get_golden())

    name_string = "{}_mode_{}_strength_{}_gd_{}_normal_1".format('LTM', 1, 4, 12)
    frame = [DTestUnit([plane[0]], [conn], __get_name(0, name_string), frameID = 0),\
    DTestUnit([plane[1]], [conn], __get_name(0, name_string), frameID = 1),\
    DTestUnit([plane[2]], [conn], __get_name(0, name_string), frameID = 2)]
    #frames = [frame[0],frame[1],frame[2]]
    frames = [frame[0],frame[1]]
    return DTestFrameUnit(frames, __get_name(0, name_string))

def __get_case_normal_2(crtc_id:int):
    def __get_property():
        p_ltm = OrderedDict()
        p_ltm["ltm_enable"] = 1
        p_ltm["Mode"] = 1
        p_ltm["VidMode"] = 1
        p_ltm["Strength"] = 4
        p_ltm["Grid_num"] = [12,12]
        p_ltm["width"] = 1920
        p_ltm["height"] = 1280

        return OrderedDict([('LTM', p_ltm)])

    def __get_golden():
        # Fill golden
        #return OrderedDict([('md5sum', '1234567')])
        return OrderedDict()

    crtc = Crtc(crtc_id, __get_property())

    plane = [Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_3.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_4.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_5.bmp")]

    conn = Connector(0, crtc, 'AR30', 1920, 1280, 60, golden=__get_golden())

    name_string = "{}_mode_{}_strength_{}_gd_{}_normal_2".format('LTM', 1, 4, 12)
    frame = [DTestUnit([plane[0]], [conn], __get_name(0, name_string), frameID = 0),\
    DTestUnit([plane[1]], [conn], __get_name(0, name_string), frameID = 1),\
    DTestUnit([plane[2]], [conn], __get_name(0, name_string), frameID = 2)]
    #frames = [frame[0],frame[1],frame[2]]
    frames = [frame[0],frame[1]]
    return DTestFrameUnit(frames, __get_name(0, name_string))

def __get_case_scene_change(crtc_id:int):
    def __get_property():
        p_ltm = OrderedDict()
        p_ltm["ltm_enable"] = 1
        p_ltm["Mode"] = 1
        p_ltm["VidMode"] = 1
        p_ltm["Strength"] = 4
        p_ltm["Grid_num"] = [12,12]
        p_ltm["width"] = 1920
        p_ltm["height"] = 1280

        return OrderedDict([('LTM', p_ltm)])

    def __get_golden():
        # Fill golden
        #return OrderedDict([('md5sum', '1234567')])
        return OrderedDict()

    crtc = Crtc(crtc_id, __get_property())

    plane = [Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_0.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_1.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_2.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_3.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_4.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_5.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_6.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_7.bmp"),\
    Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_8.bmp")]

    conn = Connector(0, crtc, 'AR30', 1920, 1280, 60, golden=__get_golden())

    name_string = "{}_mode_{}_strength_{}_gd_{}_scene_change".format('LTM', 1, 4, 12)
    frame = [DTestUnit([plane[0]], [conn], __get_name(0, name_string), frameID = 0),\
    DTestUnit([plane[1]], [conn], __get_name(0, name_string), frameID = 1),\
    DTestUnit([plane[2]], [conn], __get_name(0, name_string), frameID = 2),\
    DTestUnit([plane[3]], [conn], __get_name(0, name_string), frameID = 3),\
    DTestUnit([plane[4]], [conn], __get_name(0, name_string), frameID = 4),\
    DTestUnit([plane[5]], [conn], __get_name(0, name_string), frameID = 5),\
    DTestUnit([plane[6]], [conn], __get_name(0, name_string), frameID = 6),\
    DTestUnit([plane[7]], [conn], __get_name(0, name_string), frameID = 7),\
    DTestUnit([plane[8]], [conn], __get_name(0, name_string), frameID = 8)]
    frames = [frame[0],frame[1],frame[2],frame[3],frame[4],frame[5],frame[6],frame[7],frame[8]]
    return DTestFrameUnit(frames, __get_name(0, name_string))

def __get_case_af_filter(crtc_id:int):
    def __get_property(if_af_filter=False):
        #ltm
        p_ltm = OrderedDict()
        p_ltm["ltm_enable"] = 1
        p_ltm["Mode"] = 1
        p_ltm["VidMode"] = 1
        p_ltm["Strength"] = 4
        p_ltm["Grid_num"] = [12,12]
        p_ltm["width"] = 1920
        p_ltm["height"] = 1280
        #affine grid filtering
        p_af_grid_filter = OrderedDict()
        p_af_grid_filter["weight"] = 800
        p_af_grid_filter["slope
        p_af_grid_filter["bias"] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        return OrderedDict([('LTM', p_ltm), ('LTM_AF_FILTER', p_af_grid_filter)]) if if_af_filter else OrderedDict([('LTM', p_ltm)])

    def __get_golden():
        # Fill golden
        #return OrderedDict([('md5sum', '1234567')])
        return OrderedDict()

    crtc = Crtc(crtc_id, __get_property())
    crtc_af = Crtc(crtc_id, __get_property(True))

    plane = [Plane(0, crtc, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_0.bmp"),\
    Plane(0, crtc_af, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_1.bmp"),\
    Plane(0, crtc_af, 'AR24', 1920, 1280, 60, resource = "imgseq2_f_2.bmp")]

    conn = Connector(0, crtc, 'AR30', 1920, 1280, 60, golden=__get_golden())
    conn_af = Connector(0, crtc_af, 'AR30', 1920, 1280, 60, golden=__get_golden())

    name_string = "{}_mode_{}_strength_{}_gd_{}_af_filter".format('LTM', 1, 4, 12)
    frame = [DTestUnit([plane[0]], [conn], __get_name(0, name_string), frameID = 0),\
    DTestUnit([plane[1]], [conn_af], __get_name(0, name_string), frameID = 1),\
    DTestUnit([plane[2]], [conn_af], __get_name(0, name_string), frameID = 2)]
    #frames = [frame[0],frame[1],frame[2]]
    frames = [frame[0],frame[1]]

    return DTestFrameUnit(frames, __get_name(0, name_string))

@dtest_unit_group('dc9400')
def __gen(chip_info):
#    return [ __get_case_normal_1(0) ] + \
#       [ __get_case_normal_2(0) ] + \
#        [ __get_case_scene_change(0) ] + \
#        [ __get_case_af_filter(0) ]

    return [ __get_case_normal_1(0) ] + \
        [ __get_case_normal_2(0) ] + \
        [ __get_case_af_filter(0) ]